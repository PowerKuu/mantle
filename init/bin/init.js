#!/usr/bin/env node

const fs = require("fs")
const fsextra = require("fs-extra")
const path = require("path")
const chalk = require("chalk")

const exec = require("child_process").exec

function CreateIndex(name){
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${name}</title>

    <script type="module" src="/src/main.tsx" defer></script>
</head>
    <body>
        <div id="app"></div>
    </body>
</html>
`.trim()
}

function CreateTsConfig(){
    return `
{
    "compilerOptions": {
        "target": "ESNext",
        "useDefineForClassFields": true,
        "module": "ESNext",
        "lib": ["ESNext", "DOM"],
        "moduleResolution": "Node",
        "strict": false,
        "sourceMap": true,
        "resolveJsonModule": true,
        "isolatedModules": true,
        "esModuleInterop": true,
        "noEmit": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitReturns": true,
        "skipLibCheck": true,
        "jsx": "preserve",
    },

    "include": ["src", "types.d.ts"]
}
`.trim()
}

function CreateViteConfig(){
    return `
import { defineConfig } from 'vite'

export default defineConfig({
    esbuild: {
    jsxFactory: '_factory_',
    jsxFragment: '_fragment_',
    jsxInject: \`import {_factory_, _fragment_} from 'mantle-web/tsm'\`
    }
})
`.trim()
}

function CreateGitIgnore(){
return `
# Custom
package-lock.json
*.env
*.env.development.local
*.env.test.local
*.env.production.local
*.env.local

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Sass
.sass-cache/
*.css.map
*.sass.map
*.scss.map
`.trim()
}

function ExecAsync(command) {
    return new Promise((resolve, reject) => {
        exec(command, (error, stdout, stderr) => {
            if (error) {
                reject(error)
            } else {
                resolve(stdout)
            }
        } )
    } )
}

async function create(name) {
    const root = path.resolve(name)

    console.log(chalk.green(`Creating project in ${root}...`))

    if (fs.existsSync(root)) {
        console.log(chalk.red(`${root} already exists.`))
        return true
    }

    await ExecAsync(`npm create vite@latest ${name} -- --template vanilla-ts`)

    await ExecAsync(`cd ${name} && npm install && npm install mantle-web`)


    const SrcFolder = path.join(root, "src")
    const PublicFolder = path.join(root, "public")

    fsextra.emptyDirSync(SrcFolder)
    fsextra.emptyDirSync(PublicFolder)
    fs.writeFileSync(path.join(SrcFolder, "main.tsx"), `import { router } from "mantle-web/router"`)

    fs.writeFileSync(path.join(root, "index.html"), CreateIndex(name))
    fs.writeFileSync(path.join(root, "tsconfig.json"), CreateTsConfig())
    fs.writeFileSync(path.join(root, "vite.config.js"), CreateViteConfig())
    fs.writeFileSync(path.join(root, "types.d.ts"), `declare module "*.module.css";`)
    fs.writeFileSync(path.join(root, ".gitignore"), CreateGitIgnore())

    fs.mkdirSync(path.join(root, "/src/pages"))
    fs.mkdirSync(path.join(root, "/src/components"))
    fs.mkdirSync(path.join(root, "/src/styles"))

    console.log(chalk.green(`Created ${name} at ${root} using mantle-init`))
    
    return false
}

create(process.argv[2] || "index")
